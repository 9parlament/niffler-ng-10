plugins {
    id 'org.springframework.boot' version '3.5.5'
    id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'guru.qa'
version = '2.0.5'

dependencies {
    implementation project(':niffler-grpc-common')

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation("net.devh:grpc-server-spring-boot-starter:${project.ext.springGrpcVersion}") {
        exclude group: 'io.grpc'
        exclude group: 'com.google.protobuf'
    }
    implementation "com.google.protobuf:protobuf-java-util:${project.ext.protobufVersion}"
    implementation "io.grpc:grpc-netty-shaded:${project.ext.grpcVersion}"
    implementation "io.grpc:grpc-services:${project.ext.grpcVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-vault-config:${project.ext.springVaultVersion}"
    implementation "org.flywaydb:flyway-core:${project.ext.flywayVersion}"
    implementation "org.flywaydb:flyway-database-postgresql:${project.ext.flywayVersion}"
    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    compileOnly "org.projectlombok:lombok:${project.ext.lombokVersion}"
    runtimeOnly "org.postgresql:postgresql:${project.ext.postgresDriverVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jib {
    container {
        ports = ['8091', '8092']
        environment = [
                'SPRING_PROFILES_ACTIVE': project.findProperty('profile').toString() ?: 'docker',
                'TZ'                    : project.findProperty('timezone').toString() ?: 'UTC'
        ]
        creationTime = 'USE_CURRENT_TIMESTAMP'
        labels = [
                'maintainer': 'Dmitrii Tuchs @dtuchs',
                'version'   : "${project.version}".toString()
        ]
    }
    from {
        image = "${project.ext.dockerImage}"
        platforms {
            platform {
                architecture = "${project.ext.dockerArch}"
                os = 'linux'
            }
        }
    }
    to {
        image = "${project.ext.dockerHubName}/${project.name}"
        tags = ['latest']
    }
}

tasks.jibDockerBuild.dependsOn test

tasks.register('printVersion') {
    doLast {
        println project.version
    }
}
